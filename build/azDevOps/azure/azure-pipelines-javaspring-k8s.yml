#############################################################################################################################
# This is a generated file which includes some replacements.                                                                #
# It is still very much recommended to go through this and ensure all variables are correct for your business/domain        #
# All variables are defined in a global scope.                                                                              #
# All Terraform produced resource names are using a labels module ensuring a predictable naming convention                  #
# E.g.: variables for company, project, stage and domain will produce a name of `$company-$project-$stage-$domain`          #
# NB: Some resources e.g. blob storage only allow for alpha numeric characters so the name is adjusted accordingly          #
#  ==> `$company$project$stage$domain`                                                                                      #
#############################################################################################################################
name: "$(Build.SourceBranchName)-init"

pr:
  - main

trigger:
  branches:
    include:
      - '*'
  paths:
    include:
      - '*'

resources:
  repositories:
    - repository: templates
      type: github
      name: amido/stacks-pipeline-templates
      ref: maven-install-for-modules
      # EXCHANGE THIS FOR YOUR OWN ENDPOINT CONNECTION TO GITHUB
      # REPOSITORY IS PUBLIC
      endpoint: amidostacks

  containers:
    # Container for Java Build and Testing
    - container: azul_java
      image: azul/zulu-openjdk-debian:11
    # Container for inlining Jacoco assets as Azure DevOps strips them
    # https://github.com/microsoft/azure-pipelines-tasks/issues/3027
    - container: node
      image: amidostacks/node-14:0.0.1
    # Container for Sonar Scanner
    - container: sonar_scanner
      image: amidostacks/ci-sonarscanner:0.0.2
    # Container for Kubernetes Deployment
    - container: k8s_deploy
      image: amidostacks/ci-k8s:0.0.12
    # Container for Terraform deployments
    - container: terraform_custom
      image: amidostacks/ci-tf:0.0.8

variables:
  - template: azuredevops-vars.yml

  - name: component
    value: api

  - name: role
    value: backend
  #
  # SelfConfig
  # If you haven't specified source_repo at cli runtime please ensure you replace it here
  # It is case sensitive for TFS based repos

  - name: self_remote_repo
    value: "amido/$(self_repo)"
  - name: self_repo_src
    value: java
  - name: self_post_deploy_test_src
    value: "api-tests"
  - name: self_repo_dir
    value: "$(Agent.BuildDirectory)/s/$(self_repo)"
  - name: self_project_dir
    value: "$(self_repo_dir)/$(self_repo_src)"
  - name: self_functional_testproject_dir
    value: "$(self_repo_dir)/$(self_post_deploy_test_src)"
  - name: self_repo_tf_src
    value: deploy/azure/app/kube
  - name: self_repo_tf_dir
    value: "$(self_repo_dir)/$(self_repo_tf_src)"

  - name: self_pipeline_repo
    value: "$(Agent.BuildDirectory)/s/stacks-pipeline-templates"
  - name: self_pipeline_scripts_dir
    value: "$(self_pipeline_repo)/scripts"

  # Versioning
  - name: version_major
    value: 0
  - name: version_minor
    value: 0
  - name: version_revision
    value: "$[counter(join(variables['version_major'], join('-', variables['version_minor'])), 0)]"

  # PR / Branch vars
  - name: source_branch_ref
    value: "$[coalesce(variables['System.PullRequest.SourceBranch'], variables['Build.SourceBranch'])]"
  - name: target_branch_ref
    value: "$[coalesce(variables['System.PullRequest.TargetBranch'], '')]"
  - name: pullrequest_number
    value: "$[coalesce(variables['System.PullRequest.PullRequestNumber'], variables['System.PullRequest.PullRequestId'], '')]"

  # Docker Config
  - name: docker_dockerfile_path
    value: "."
  - name: docker_image_name
    value: "$(self_generic_name)"
  - name: docker_image_tag
    value: "${{ variables.version_major }}.${{ variables.version_minor }}.$(version_revision)-$(Build.SourceBranchName)"
  - name: docker_java_image
    value: "azul_java"

  - name: k8s_docker_registry_nonprod
    value: "${{ variables.docker_container_registry_name_nonprod }}.azurecr.io"
  - name: k8s_docker_registry_prod
    value: "${{ variables.docker_container_registry_name_prod }}.azurecr.io"

  - name: resource_def_name
    value: java-api-cqrs-evnts

  # BUILD ARTIFACTS across stages
  - name: build_artifact_deploy_path
    value: "${{ variables.self_repo_dir }}/deploy/k8s/app"
  - name: build_artifact_deploy_name
    value: "${{ variables.self_generic_name }}"

  # DEFAULT IMAGE RUNNER
  - name: pool_vm_image
    value: ubuntu-20.04

  # Maven
  - name: maven_cache_directory
    value: "./.m2"
  - name: maven_surefire_reports_dir
    value: "target/surefire-reports"
  - name: maven_allowed_test_tags
    value: "Unit | Component | Integration"
  - name: maven_allowed_post_deploy_test_tags
    value: "@Functional or @Smoke or @Performance"
  - name: maven_ignored_post_deploy_test_tags
    value: "@Ignore"
  - name: maven_post_deploy_html_report_directory
    value: "target/site/serenity"
  - name: maven_post_deploy_failsafe_reports_directory
    value: "target/failsafe-reports"

  # Vulnerability Scan
  - name: vulnerability_scan
    value: true
  - name: vulnerability_scan_report
    value: "target/dependency-check-report.html"
  - name: vulnerability_scan_fail_build_on_detection
    value: false

  # Yamllint
  - name: yamllint_config_file
    value: "${{ variables.self_repo_dir }}/yamllint.conf"
  - name: yamllint_scan_directory
    value: "."

  # Functional Tests
  - name: functional_test
    value: true
  - name: functional_test_path
    value: "${{ variables.self_functional_testproject_dir }}"
  - name: functional_test_artefact_path
    value: "${{ variables.self_repo_dir }}/${{ variables.self_post_deploy_test_src }}"
  - name: functional_test_artefact_name
    value: "post-deploy-test-artefact"
  - name: functional_test_artefact_download_location
    value: "$(Pipeline.Workspace)/${{ variables.functional_test_artefact_name }}"

  # Build Task Naming
  - name: java_project_type
    value: "Java App"
  - name: functional_test_project_type
    value: "Functional API Tests"

stages:
  - stage: Build
    variables:
      # You can find notes in the READMEs around which values to use for each ENV variable group
      - group: amido-stacks-infra-credentials-nonprod
      - group: stacks-credentials-nonprod-kv
      - group: amido-stacks-java-api
      - group: amido-stacks-java-cqrs-events-api
    jobs:
      - job: ApiBuild
        pool:
          vmImage: $(pool_vm_image)
        steps:
          - checkout: self

          - checkout: templates

          # Updates the build number in Azure DevOps (requires refresh in the UI to see)
          - bash: |
              echo '##vso[Build.UpdateBuildNumber]${{ variables.docker_image_tag }}'
            displayName: 'Update: Build Number'

          # Validates all YAML files in the repo to check they adhere to standards
          - template: templates/steps/build/test-validate-yaml.yml
            parameters:
              pipeline_scripts_directory: "${{ variables.self_pipeline_scripts_dir }}"
              container: "k8s_deploy"
              yamllint_config_file: "${{ variables.yamllint_config_file }}"
              yamllint_scan_directory: "${{ variables.yamllint_scan_directory }}"

          # Builds the Java app and runs tests
          - template: templates/steps/build/build-java.yml
            parameters:
              repo_root_dir: "${{ variables.self_repo_dir }}"
              project_root_dir: "${{ variables.self_project_dir }}"
              pipeline_scripts_directory: "${{ variables.self_pipeline_scripts_dir }}"
              # Maven
              maven_cache_directory: "${{ variables.maven_cache_directory }}"
              maven_surefire_reports_dir: "${{ variables.maven_surefire_reports_dir }}"
              maven_allowed_test_tags: "${{ variables.maven_allowed_test_tags}}"
              maven_package_version: "${{ variables.docker_image_tag }}"
              # Docker
              docker_build_container: "${{ variables.docker_java_image }}"
              # Vulnerability Scanning
              vulnerability_scan: "${{ variables.vulnerability_scan }}"
              vulnerability_scan_fail_build_on_detection: "${{ variables.vulnerability_scan_fail_build_on_detection }}"
              project_type: "${{ variables.java_project_type }}"

          # Performs stati code analysis, such as Sonar Cloud
          - template: templates/steps/build/test-static-code-analysis.yml
            parameters:
              project_root_dir: "${{ variables.self_project_dir }}"
              pipeline_scripts_directory: "${{ variables.self_pipeline_scripts_dir}}"
              # PR / Branch vars
              source_branch_ref: "$(source_branch_ref)"
              target_branch_ref: "$(target_branch_ref)"
              pullrequest_number: "$(pullrequest_number)"
              # Sonar
              sonar_enable: true
              sonar_container: "sonar_scanner"
              sonar_host_url: "https://sonarcloud.io"
              sonar_project_name: "$(SONAR_PROJECT_NAME)"
              sonar_project_key: "$(SONAR_PROJECT_KEY)"
              sonar_token: "$(SONAR_TOKEN)"
              sonar_organisation: "$(SONAR_ORGANIZATION)"
              # Probably `GitHub` or `vsts`
              sonar_pullrequest_provider: "GitHub"
              sonar_remote_repo: "${{ variables.self_remote_repo }}"
              sonar_command: "sonar-scanner"
              # Docker
              docker_image_tag: "${{ variables.docker_image_tag }}"

          # Post build tasks, such as Test and Coverage upload, and publishing artefacts
          - template: templates/steps/build/post-build-tasks.yml
            parameters:
              project_root_dir: "${{ variables.self_project_dir }}"
              functional_test_project_root_dir: "${{ variables.self_functional_testproject_dir }}"
              # Build Output File
              # files to be persisted across stages
              build_file: true
              build_file_path: "${{ variables.build_artifact_deploy_path }}"
              build_file_artefact_name: "${{ variables.build_artifact_deploy_name }}"
              # Functional tests
              functional_test: ${{ variables.functional_test }}
              functional_test_artefact_name: "${{ variables.functional_test_artefact_name }}"
              functional_test_artefact_path: "${{ variables.functional_test_artefact_path }}"
              vulnerability_scan: "${{ variables.vulnerability_scan }}"
              vulnerability_scan_report: "${{ variables.vulnerability_scan_report }}"
              java_project_type: "${{ variables.java_project_type }}"
              functional_test_project_type: "${{ variables.functional_test_project_type }}"
